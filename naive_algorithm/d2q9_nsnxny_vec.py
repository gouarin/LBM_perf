#pythran export m2f(float64 [][][], float64 [][][]) 
def m2f(m, f):
    c0 = 1./6
    c1 = 1./9
    c2 = 1./18
    c3 = 1./36
    c4 = 1./12

    f[0] = c1*m[0] - c1*m[3] + c1*m[4]
    f[1] = c1*m[0] + c0*m[1] - c3*m[3] - c2*m[4] - c0*m[5] + 0.25*m[7]
    f[2] = c1*m[0] + c0*m[2] - c3*m[3] - c2*m[4] - c0*m[6] - 0.25*m[7]
    f[3] = c1*m[0] - c0*m[1] - c3*m[3] - c2*m[4] + c0*m[5] + 0.25*m[7]
    f[4] = c1*m[0] - c0*m[2] - c3*m[3] - c2*m[4] + c0*m[6] - 0.25*m[7]
    f[5] = c1*m[0] + c0*m[1] + c0*m[2] + c2*m[3] + c3*m[4] + c4*m[5] + c4*m[6] + 0.25*m[8]
    f[6] = c1*m[0] - c0*m[1] + c0*m[2] + c2*m[3] + c3*m[4] - c4*m[5] + c4*m[6] - 0.25*m[8]
    f[7] = c1*m[0] - c0*m[1] - c0*m[2] + c2*m[3] + c3*m[4] - c4*m[5] - c4*m[6] + 0.25*m[8]
    f[8] = c1*m[0] + c0*m[1] - c0*m[2] + c2*m[3] + c3*m[4] + c4*m[5] - c4*m[6] - 0.25*m[8]

#pythran export f2m(float64 [][][], float64 [][][]) 
def f2m(f, m):
    m[0] = f[0] + f[1] + f[2] + f[3] + f[4] + f[5] + f[6] + f[7] + f[8]
    m[1] = f[1] - f[3] + f[5] - f[6] - f[7] + f[8]
    m[2] = f[2] - f[4] + f[5] + f[6] - f[7] - f[8]
    m[3] = -4.*f[0] - f[1] - f[2] - f[3] - f[4] + 2.*f[5] + 2.*f[6] + 2.*f[7] + 2.*f[8]
    m[4] = 4.*f[0] - 2.*f[1] - 2.*f[2] - 2.*f[3] - 2.*f[4] + f[5] + f[6] + f[7] + f[8]
    m[5] = -2.*f[1] + 2.*f[3] + f[5] - f[6] - f[7] + f[8]
    m[6] = -2.*f[2] + 2.*f[4] + f[5] + f[6] - f[7] - f[8]
    m[7] = f[1] - f[2] + f[3] - f[4]
    m[8] = f[5] - f[6] + f[7] - f[8]

#pythran export transport(float64 [][][]) 
def transport(f):
    f[1, :, 1:] = f[1, :, :-1]
    f[2, 1:, :] = f[2, :-1, :]
    f[3, :, :-1] = f[3, :, 1:]
    f[4, :-1, :] = f[4, 1:, :]
    f[5, 1:, 1:] = f[5, :-1, :-1]
    f[6, 1:, :-1] = f[6, :-1, 1:]
    f[7, :-1, :-1] = f[7, 1:, 1:]
    f[8, :-1, 1:] = f[8, 1:, :-1]

#pythran export equilibrium(float64 [][][]) 
def equilibrium(m):
    m[3] = -2*m[0] + 3.0*m[1]**2 + 3.0*m[2]**2
    m[4] = m[0] + 1.5*m[1]**2 + 1.5*m[2]**2
    m[5] = -1.0*m[1]
    m[6] = -1.0*m[2]
    m[7] = 1.0*m[1]**2 - 1.0*m[2]**2
    m[8] = 1.0*m[1]*m[2]
    
#pythran export relaxation(float64 [][][]) 
def relaxation(m):
    m[3] += 1.1312217194570136*(-2*m[0] + 3.0*m[1]**2 + 3.0*m[2]**2 - m[3])
    m[4] += 1.1312217194570136*(m[0] + 1.5*m[1]**2 + 1.5*m[2]**2 - m[4])
    m[5] += 1.1312217194570136*(-1.0*m[1] - m[5])
    m[6] += 1.1312217194570136*(-1.0*m[2] - m[6])
    m[7] += 1.8573551263001487*(1.0*m[1]**2 - 1.0*m[2]**2 - m[7])
    m[8] += 1.8573551263001487*(1.0*m[1]*m[2] - m[8])

#pythran export periodic_bc(float64 [][][]) 
def periodic_bc(f):
    f[:, 0, :] = f[:, -2, :]
    f[:, -1, :] = f[:, 1, :]
    f[:, :, 0] = f[:, :, -2]
    f[:, :, -1] = f[:, :, 1]


#pythran export one_time_step(float64 [][][], float64 [][][]) 
def one_time_step(f, m):
    periodic_bc(f)
    transport(f)
    f2m(f, m)
    relaxation(m)
    m2f(m, f)

